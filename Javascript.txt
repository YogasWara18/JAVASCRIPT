"Apa itu Javascript?"

Secara definisi javaScript adalah bahasa pemrograman utnuk web yang digunakan untuk membuat halaman web menjadi interaktif.

secara Fungsi javaScript memiliki tugas utama.

 1. Dinamis     : Memungkinkan perubahan konten halaman tanpa memuat ulang.
 2. Interaktif  : Digunakan untuk menangani event, animasi, dan validasi form.
 3. Versatil    : Dapat digunakan di front-end dan back-end ( Node.js ).  


Sejarah & Evolusi javaScript 

 1. Diciptakan oleh Brendan Eich pada tahun 1995.
 2. Awalnya disebut "Mocha" kemudian "LiveScript" dan akhrinya "JavaScript"
 3. 1996 : JavaScript diadopsi oleh Netscape Navigator dan internet Explorer.
 4. 1997 : ECMAScript diciptakan sebagai standar JavaScript.
 5. Evolusi ECMAScript ( ES5 pada 2009, ES6 pada 2015 dan fitur baru seperti arrow functions, promises, dan lainnya ).
 6. Munculnya framework dan library seperti React, Angular, dan Vue.js.
 7. Node.js memungkinkan JavaScript digunakan di sisi server. 

 
Cara Kerja JavaScript di Browser 

Setiap browser memiliki mesin javaScript ( contoh : V8 di Chrome, SpiderMonkey di Firefox ).

Mesin ini yang mengeksekusi kode JavaScript dan berinteraksi dengan DOM ( Document Object Model ).


Langkah Kerja JavaScript : 

 1. Parsing    : Browser membaca HTML dan membentuk DOM ( Document Object Model ).
 2. Eksekusi   : Mesin JavaSctipt mengeksekusi kode JavaScript sesuai urutan, berinteraksi dengan DOM untuk manipulasi elemen.
 3. Event Loop : JavaScript menangani event secara asinkron melalui event loop, memungkinkan interaksi dinamis tanpa memblokir eksekusi kode lainnya.

Contoh sederhananya : Bagaimana script sederhana di HTML dapat mengubah konten atau gaya elemen di halaman web.

"ASINKRON"

 Dalam JavaScript, asinkron adalah cara menangani operasi yang tidak langsung selesai, seperti mengambil data dari server, membaca file, atau menunggu respons dari API. JavaScript menggunakan model I/O non-Pemblokiran, yang memungkinkan eksekusi kode tetap berjalan tanpa harus menunggu operasi selesai.

 Konsep Dasar Asinkron dalam JavaScript

 JavaScript adalah bahasa pemrograman SINGLE-THREADED, yang berarti ia menjalankan satu tugas dalam satu waktu. Namun, dengan mekanisme asinkron, JavaScript dapat menangani operasi yang memerlukan waktu tanpa menghentikan eksekusi kode lainnya.

 Cara Kerja Asinkron dalam JavaScript 

  1. Event Loop dan Call Stack
  JavaScript menggunakan event loop untuk menangani operasi asinkron. ketika ada tugas asinkron seperti setTimeOut() atau fetch(), JavaScript menambahkannya ke TASK QUEU dan melanjutkan eksekusi kode lainnya. Setelah operasi selesai, EVENT LOOP akan mengembalikannya ke CALL STACK utuk diproses lebih lanjut.
  
  2. CALLBACK
  Callback adalah fungsi yang dipanggil setelah operasi asinkron selesai.
  Contohnya : 

  setTimeout(() => {
    console.log("Halo, ini dari callback!");
  }, 2000);

  Namun, penggunaan callback secara berlebihan dapat menyebabkan CALLBACK HELL, yaitu kode yang sulit dibaca dan dikelola.

  3. PROMISE 
  Promise adalah objek yang mewakili hasil dari operasi asinkron. 
  Contohnya :

  let fetchData = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Data berhasil diambil");
    }, 2000);
  });

  fetchData.then(data => console.log(data));

  Dengan .then() kita dapat menangani hasil dari Promise tanpa harus menggunakan callback bersarang.

  4. ASYNC/AWAIT
  Async/Await adalah cara modern untuk menangani operasi asinkron dengan lebih mudah dibaca dan menyerupai kode sinkron. 
  Contohnya :

  async function fetchData() {
    let response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
    let data = await response.json();
    console.log(data);
  }

  fetchData();

  Dengan await, eksekusi kode akan menunggu hasil dari Promise tanpa menggunakan .then()


Kesimpulan 

Asinkron dalam JavaScript memungkinkan eksekusi kode tetap berjalan tanpa harus menunggu operasi selesai. Dengan memahami EVENT LOOP, CALLBACK, PROMISE, dan ASYNC/AWAIT, kita dapat menulis kode yang lebih efesien dan mudah dikelola.

Rangkuman 

JavaScript adalah bahasa pemrograman esensial untuk web.
Memiliki sejarah yang kaya dan terus berkembang.
Memungkinkan pengembang halaman web interaktif dan dinamis.




"VARIABEL JavaScript"

Apa itu Variabel?

- Variabel adalah wadah yang digunakan untuk menyimpan data yang dapat berubah sepanjang program berjalan.
- Analogi : Variabel seperti kotak yang menyimpan nilai, dan kita bisa mengganti isi kotak tersebut kapan saja.
- Variabel di JavaScript itu ada 3 yaitu, Var, Let, Const.

Kenapa ada Var Let Const?

Karena ada kondisi dimana penggunaan Var Let Const pada waktu tertentu.



"TIPE DATA DI JAVASCRIPT" 

Didalam javascript data di kelompokkan dalam 2 tipe

1. Tipe Data Primitif 

  - STRING     : Urutan karakter yang digunakan untuk menyimpan dan memanipulasi teks.

    `` backtik dapat digunakan utnuk mengambil variabel dengan cara menggunakan sign ${nama variabel}

  - NUMBER     : Digunakan untuk menyimpan nilai numerik, termasuk bilangan bulat ( integer ) dan desimal ( float ).
  - BOOLEAN    : Hanya memiliki dua nilai : true atau false.
  - UNDEFINED  : Nilai yang secara otomatis diberikan kepada variabel yang belum dideklarasikan atau belum diinisialisasi.
  - NULL       : Nilai yang secara eksplisit diberikan untuk menunjukkan bahwa variabel tidak memiliki nilai.
  - SYMBOL ES6 : Symbol adalah tipe data primitif yang unik dan immutable, digunakan sebagai identifier unik untuk properti objek.
  - BIGINT     : Adalah tipe data yang digunakan untuk merepresentasikan angka yang sangat besar melebihi batas tipe data Number.

2. Tipe Data Reference 

  - OBJECT    : Adalah tipe data kompleks yang digunakan untuk menyimpan koleksi data dalam pasangan key - value.
  - ARRAY     : Adalah jenis Object yang menyimpan koleksi data berurutan dan dapat diakses melalui indeks.
  - FUNCTION  : Adalah blok kode yang dapat digunakan kembali, yang juga dianggap sebagai Object di JavaScript.

Semua tipe data reference ini adalah object 

Perbedaan Utama Tipe Data Primitive & Tipe Data Reference

  - Penyimpanan : Tipe data primitif disimpan di stack memory dengan nilai langsunggnya, sedangkan Tipe data Reference disimpan di heap memory dan variabel hanya menyimpan referensi ke data tersebut.
  - Perubahan Nilai : Pada tipe data primitif, mengubah nilai variabel tidak mempengaruhi variabel lain yang menyimpan salinan nilai tersebut. Sedangkan pada reference types, mengubah data melalui satu variabel akan mempengaruhi variabel lain yang merujuk ke objek yang sama.
  - Kinerja : Operasi pada tipe data primitif biasanya lebih cepat dan menggunakan lebih sedikit memori dibandingkan reference types karena penyimpanan dan akses langsung ke nilai.



"TYPE CONVERSION" 

  Apa itu Type Conversion?

  - Type Conversion adalah proses mengubah satu tipe data menjadi tipe data lain.
  - Terdapat dua jenis konversi : IMPLICIT CONVERSION ( Coercion ) dan EXPLICIT CONVERSION.
  - IMPLICIT CONVERSION adalah konversi tipe data yang dilakukan secara otomatis oleh javaScript.
  - Terjadi ketika JavaScript mencoba menyesuaikan tipe data secara otomatis selama operasi tertentu.
  - EXPLICIT CONVERSION adalah konversi tipe data yang dilakukan secara eksplisit oleh programmer menggunakan metode atau fungsi tertentu.


"IMPLICIT CORVERSION" 

Dalam JavaScript, Implicit corversion atau yang dikenal sebagai TYPE COERCION, terjadi ketika JavaScript secara otomatis mengubah tipe data dalam suatu operasi. Hal ini dilakukan agar ekspresi dapat dievaluasi tanpa harus secara eksplisit mengonversi tipe data.

    - String Coercion : Jika ada operasi antara STRING dan tipe data lain, maka tipe data lain akan dikonversi menjadi string.
    - Number Coercion : JavaScript dapat mengubah BOOLEAN atau STRING menjadi NUMBER dalam operasi matematika.
    - Boolean Coercion : Saat digunakan dalam kondisi logika, JavaScript dapat mengonversi nilai menjadi TRUE atau FALSE secara otomatis. 

"Waspada dengan Type Coercion" 

Implicit conversion bisa membantu tetapi juga dapat menyebabkan bug yang sulit dilacak. Contoh yang sering menimbulkan kebingungan :

Di sini, JavaScript secara otomatis mengonversi tipe data sebelum melakukan perbandingan.
jika ingin menghindari TYPE COERCION dalam perbandingan, gunakan STRICT EQUALITY ( === ), yang memeriksa tipe data :

console.log(0 === false); // Output: false

Implicit conversion bisa sangat berguna, tapi perlu diperhatikan agar tidak menyebabkan kesalahan dalam logika program.


"EKSPLISIT CONVERSION"

Dalam JavaScript, konversi adalah proses mengubah tipe data dari satu bentuk ke bentuk lainnya. Konversi ini bisa terjadi secara Implisit ( Otomatis ) atau Eksplisit ( Dengan perintah langsung dari programmer ). Berikut adalah penjelasan detail dan contoh eksplisit untuk berbagai jenis konversi dalam javaScript.

1. KONVERSI STRING KE NUMBER 
  Konversi ini dilakukan ketika kita ingin mengubah teks ( string ) menjadi angka.

  Contoh Eksplisit :
 
  let str1 = "123";
  let num1 = Number(str1);    // Menggunakan fungsi Number()
  console.log(num1);          // Output: 123 number
 
  let str2 = "45.67";
  let num2 = parseFloat(str2) // Menggunakan parseFloat()
  console.log(num2)           // Output: 45.67 number

  let str3 = "200"
  let num3 = parseInt(str3);  // Menggunakan parseInt()
  console.log(num3);          // Output: 200 number

  Catatan : Jika string tidak mengandung angka yang valid, hasilnya akan NaN ( Not a Number ).

2. KONVERSI NUMBER KE STRING 
  Mengubah angka menjadi teks untuk keperluan seperti tampilan UI atau pengolahan data.

  Contoh Eksplisit :

  let num = 456;
  let strNum = String(num);           // Menggunakan String()
  console.log(strNum);                // Output: "456" string

  let anotherStr = num.toString();    // Menggunakan .toString()
  console.log(anotherStr);            // Output: "456"

3. KONVERSI BOOLEAN KE NUMBER
  Konversi nilai TRUE atau FALSE menjadi angka.

  Contoh Eksplisit : 

  console.log(Number(true));      // Output: 1
  console.log(Number(false));     // Output: 0

4. KONVERSI NUMBER KE BOOLEAN 
  Mengubah angka menjadi nilai boolean untuk logika pemrograman.

  Contoh Eksplisit :

  console.log(Boolean(1));      // Output: true
  console.log(Boolean(0));      // Output: false 
  console.log(Boolean(100));    // Output: true ( Angka selain 0 adalah true ) 
  console.log(Boolean(-5));     // Output: true ( Angka negatif juga dianggap true )

5. KONVERSI STRING KE BOOLEAN 
  Mengubah teks menjadi boolean.

  Contoh Eksplisit : 

  console.log(Boolean("Hello")); // Output: true ( String non-kosong dianggap true )
  console.log(Boolean(""));      // Output: false ( String kosong dianggap false )

6. KONVERSI OBJECT KE STRING ATAU NUMBER
  JavaScript otomatis memanggil metode .toString() atau valueOf() pada objek saat diperlukan.

  Contoh Eksplisit :

  let obj = { name: "Yogas", age: 25 };
  console.log(String(obj));                 // Output: "[object Object]"

  let data = new Date();
  console.log(Number(date));                // Output: Waktu dalam bentuk timestamp ( jumlah milidetik sejak 1970 )

7. KONVERSI OTOMATIS ( TYPE COERCION )
  JavaScript terkadang secara otomatis mengonversi tipe data saat melakukan operasi 

  Contoh Eksplisit : 

  console.log("5" + 3);         // Output: "53" ( Otomatis mengubah angka menjadi string )
  console.log("5" - 3);         // Output: 2 ( Otomatis mengubah string menjadi angka )
  console.log(true + false);    // Output: 1 ( true = 1, false = 0 )

  Konversi sangat penting dalam javaScript, terutama saat menangani data dari berbagai sumber.

"FALSY VALUE" 

Dalam JavaScript, FALSY VALUES adalah nilai yang dianggap sebagai FALSE saat dievaluasi dalam konteks BOOLEAN. Artinya, jika nilai ini digunakan dalam kondisi seperti if, while, atau operasi logika lainnya, maka nilainya akan dianggap TIDAK BENAR ( FALSE ) secara otomatis.

Daftar FALSY VALUES di JavaScript 
Berikut adalah semua nilai yang dianggap FALSY di javaScript :

1. false -> Nilai boolean yang secara eksplisit berarti false.
2. 0 -> Semua angka nol ( 0, -0, 0n untuk BigInt ) dianggap falsy.
3. "" ( string kosong ) -> String kosong tanpa karakter dianggap false.
4. null -> Menunjukkan tidak adanya nilai atau objek.
5. undefined -> Menunjukkan variabel yang belum diinisialisasi atau properti yang tidak ada.
6. NaN -> Hasil operasi matematika yang tidak valid ( misalnya Math.sqrt(-1) ).
7. document.all ( hanya dalam browser ) -> Ini adalah nilai khusus yang juga dianggap falsy tetapi jarang digunakan.

- Contoh penggunaan dalam kondisi logika
Saat nilai falsy digunakan dalam if atau operasi logika lainnya, mereka otomatis dianggap sebagai false: 

if (0) {
  console.log("Ini tidak akan dicetak.");
} else {
  console.log("Nilai 0 dianggap falsy!");
}
// Output: "Nilai 0 dianggap falsy!"

- Falsy Value dalam Konversi Boolean 
Jika kita ingin mengubah sebuah nilai menjadi Boolean secara eksplisit, kita bisa menggunakan Boolean() :

console.log(Boolean(false));      // Output: false
console.log(Boolean(0));          // Output: false
console.log(Boolean(""));         // Output: false
console.log(Boolean(null));       // Output: false
console.log(Boolean(undefined));  // Output: false
console.log(Boolean(NaN));        // Output: false


- Truthy & Falsy dalam operasi logika
Selain falsy values, semua nilai lainnya dalam JavaScript dianggap TRUTHY, termasuk string yang berisi karakter, angka selain nol, objek, array, dan lainnya : 

if ("hello) {
  console.log("String non-kosong dianggap truthy!");
}
// Output: "String non-kosong dianggap truthy!"

- Potensi kesalahan akibat Falsy values
Implicit conversion dan falsy values dapat menyebabkan bug yang sulit ditemukan, seperti : 

let user = "";        // String kosong dianggap falsy
if (!user) {
  console.log("User tidak valid!");
}
// Output: "User tidak valid!"

Jika kita hanya ingin mengecek apakah sebuah variabel benar - benar kosong, ada baiknya menggunakan metode eksplisit seperti user.length === 0.


" TRUTHY VALUE "

Dalam JavaScript, konsep truthy value sangat penting karena menentukan bagaimana nilai tertentu diperlukan dalam ekspresi logika atau kondisi. JavaScript adalah bahasa yang secara otomatis melakukan konversi tipe data ( coercion ), sehingga nilai yang bukan tipe BOOLEAN tetap dapat digunakan dalam evaluasi logika.

- APA ITU TRUTHY VALUE?

Truthy value adalah nilai yang dievaluasi sebagai TRUE dalam konteks BOOLEAN, meskipun bukan benar - benar TRUE dalam tipe datanya. Ini memungkinkan kita untuk menggunakan berbagai tipe data dalam kondisi tanpa harus selalu membandingkannya secara eksplisit dengan TRUE.
Sebaliknya, nilai yang dievaluasi sebagai false disebut FALSY VALUE.

- DAFTAR TRUTHY & FALSY VALUE DI JAVASCRIPT 
  Berikut adalah daftar umum dari nilai TRUTHY dan FALSY dalam JavaScript :

- TRUTHY ( DIANGGAP SEBAGAI 'TRUE' )
  Setiap nilai yang bukan Falsy secara otomatis dianggap TRUTHY, termasuk :

- String non - kosong, misalnya -> "hello", "0", "false"
- Angka bukan nol, misalnya -> 1, -5, 3.14
- Array kosong -> []
- Objek kosong -> {}
- Function atau Symbol -> function(){}, Symbol('test')
- Set dan Map -> newSet(), newMap()
- Boolean true -> true
- Infinity & -infinity -> infinity, -infinity

- CONTOH PENGGUNAAN TRUTHY & FALSY DALAM JAVASCRIPT

1. MENGGUNAKAN if STATEMENT
  Kita bisa menggunakan TRUTHY VALUE dalam kondisi tanps membandingkannya secara eksplisit dengan TRUE :
  
  let username = "Alice";

  if (username) {
    console.log("User sudah memiliki nama.");
  } else {
    console.log("User belum mengisi nama.");
  }

  "Karena 'Alice' adalah string non - kosong, maka dianggap TRUTHY, sehingga kode di dalam blok if dieksekusi."

2. MENGGUNAKAN OPERATOR LOGIKA || (OR)
  TRUTHY VALUE sering digunakan untuk menetapkan nilai default :

  let userInput = "";                       // String kosong adalah falsy
  let defaultName = userInput || "Guest";

  console.log(defaultName);                 // Output: "Guest"

  "Karena userInput bernilai falsy (string kosong), maka "Guest" digunakan sebagai nilai pengganti."

3. MENGGUNAKAN OPERATOR && (AND)
  TRUTHY VALUE juga berguna untuk memeriksa apakah kedua kondisi terpenuhi : 

  let isLoggedIn = true;
  let userRole = "admin";

  if (isLoggedIn && userRole === "admin") {
    console.log("Akses penuh diberikan.");
  } else {
    console.log("Akses terbatas.");
  }

  "Karena isLoggedIn bernilai TRUTHY (true), dan userRole === "admin" juga true, maka pesan "Akses penuh diberikan.""


  "KESIMPULAN"
  Konsep TRUTHY & FALSY sangat penting dalam JavaScript karena : 

  1. Mempermudah evaluasi kondisi tanpa perlu perbandingan eksplisit dengan true atau false.
  2. Memungkinkan penggunaan nilai default menggunakan operator ||.
  3. Mengoptimalkan logika kode dengan operator &&.



  " OPERATOR "

  APA ITU OPERATOR 
  - Operator adalah simbol atau kata kunci yang digunakan untuk melakukan operasi pada satu atau lebih operand ( nilai atau variabel ).
  - Contoh umum termasuk penjumlahan, pengurangan, dan penggabungan string itu bisa dibilang sebagai operasi.

  JENIS-JENIS OPERATOR DI JAVASCRIPT
  - Operator Aritmatika
  - Operator Assignment
  - Operator Perbandingan 
  - Operator Logika 
  - Operator Ternary 

  " OPERATOR ARITMATIKA "
    Digunakan untuk melakukan operasi matematika.

    - + ( Penjumlahan )         - % ( Modulus: sisa bagi )
    - - ( Pengurangan )         - ** ( Eksponen: Pangkat )
    - * ( Perkalian )           - ++ ( Increment: Menambahkan satu nilai )
    - / ( Pembagian )           - -- ( Decrement: Mengurangi satu nilai )

  " OPERATOR ASSIGMENT "
    Digunakan untuk menetapkan nilai ke variabel.

    - = ( Assignment dasar )
    - += ( Penjumlahan dan assignment )
    - -= ( Pengurangan dan assignment )
    - *= ( Perkalian dan assigment )
    - /= ( Pembagian dan assigment )
    - %= ( Modulus dan assignment )

    " Operator Assignment Dasar "
      Operator assignment digunakan untuk menetapkan nilai ke varibel. Contoh dasarnya :
      
      let x = 10; // Menetapkan nilai 10 ke varibel x 

      Artinya, variabel x sekarang meyimpan nilai 10.

    " Operator Assignment Gabungan "
      Selain =, ada operator gabungan yang mengkombinasikan operasi matematika dengan assignment:

      let a = 5;
      a += 3;       // Sama dengan a = a + 3 ( nilai a sekarang 8, karna ditambahkan 5 dengan variabel a pertama bernilai 5 )
      a -= 2;       // Sama degnan a = a - 2 ( nilai a sekarang 6, karna pengurangannya berasal dari perhitungan nilai yang terakhir di operasikan ( 8 - 2 ) )
      a *= 4;       // Sama dengan a = a * 4 ( nilai a sekarang 24, karna perkaliannya berasal dari perhitungan nilai yang terakhir di operasikan ( 6 * 4 ) )
      a /= 2;       // Sama dengan a = a / 2 ( nilai a sekarang 12, karna perhitungannya berasal dari perhitungan nilai yang terakhir di operasikan ( 24 / 12) )

     Ini membantu membuat kode lebih ringkas dan mudah dibaca.

    " Operator Assignment Bitwise "
      JavaScript mendukung operator bitwise assignment, yang bekerja pada tingkat biner :

      let b = 5;    // 
  

  " Operator Perbandingan [ Comparison ]
    Digunakan untuk membandingkan dua nilai.
    Menghasilkan nilai Boolean ( true atau false )

    - == ( Sama dengan, mengecek nilai )                               - > ( Lebih besar dari )
    - === ( Sama dengan secara ketat, mengecek nilai dan tipe data )   - < ( Lebih kecil dari )
    - != ( Tidak sama dengan )                                         - >= ( Lebih besar atau sama dengan )
    - !== ( Tidak sama dengan secara ketat )                           - <= ( Lebih kecil atau sama dengan )
  